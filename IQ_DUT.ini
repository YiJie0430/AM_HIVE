#******************************************************************************
#                     IQmeas_DUT file
#******************************************************************************
#
#       Copyright (c) 2007 ACE Solution Corp.,   All Rights Reserved
#
#******************************************************************************
import os,sys,time



#------------------------------------------------------------------------------
# Enable/Disable DUT automatically	
# 0: RT2880 on board
# 1: mini-PCI RT2880 
# 2: eth2 interface
# 3: eth0 interface
#------------------------------------------------------------------------------
IQ_DUT_TYPE= 0


#------------------------------------------------------------------------------
# DUT Login information	
#------------------------------------------------------------------------------
IQ_DUT_LOGIN_ACCOUNT= "msoadmin"
IQ_DUT_LOGIN_PASSWORD= "password"

IQip="192.168.200.254" 

#------------------------------------------------------------------------------
# Set the delay time after update EEPROM for calibration data
# Only use for using COM port to control the DUT
# unit:sec
#------------------------------------------------------------------------------
IQ_CAL_DELAY_TIME=7

#------------------------------------------------------------------------------
# Calibration Tx target power (read from EEPROM) & frequency offset
# User need to set offset to the content of EEPROM (0xDE~0xDF) to get 
# real target power.
# 
# e.g. 
# if read from EEPROM is 6, user set offset to 9, then the target power
# is 15dBm (6+9)
# for CCK, the power will be 6+9+4 = 19dBm
# 4 is the offset between CCK and OFDM, you can change it by IQ_TX_POWER_OFFSET_CCK_OFDM
# for your chip
#------------------------------------------------------------------------------
#IQ_CAL_TX_POWER_OFFSET_2G	9//8     //e.g. Actual output power = 6(fix) + 8 = 14
#IQ_CAL_TX_POWER_OFFSET_5G_LO	7//8
#IQ_CAL_TX_POWER_OFFSET_5G_MI	6//8	//6
#IQ_CAL_TX_POWER_OFFSET_5G_UP	5//8	//4


#IQ_CAL_TX_POWER_OFFSET_2G=8 #for TX Power 14dBm #moded to W11.py on 2012/8/30 by Tim

#------------------------------------------------------------------------------
# Offset between CCK and OFDM
#------------------------------------------------------------------------------
IQ_TX_POWER_OFFSET_CCK_OFDM=3	  #//3


#------------------------------------------------------------------------------
# Set up/lo tolerance during calibration
# Power difference of each PA gain is about 0.5 dB for B band
#                                           1.0 dB for A band
#------------------------------------------------------------------------------
#				B_BAND	A_BAND
#IQ_CAL_TX_POWER_TOLERANCE_UP	0.5	0.6
#IQ_CAL_TX_POWER_TOLERANCE_LO	0.5	0.6

IQ_CAL_TX_POWER_TOLERANCE= 0.5   



#------------------------------------------------------------------------------
# Select the channels for calibration
# 1: do calibrate   0: do not calibrate, just use interpolate value
#------------------------------------------------------------------------------
#			1	2	3	4	5	6	7	8	9	10	11	12	13	14

#IQ_CAL_TX_CHANNEL_2G	1	1	1	1	1	1	1	1	1	1	#1	1	1	1



#			36	38	40	44	46	48	52	54	56	60	#62	64
IQ_CAL_TX_CHANNEL_5G_LO=[1,1,1,1,1,1,1,1,1,1,1,1]

#			100	102	104	108	110	112	116	118	120	124	126	128	132	134	136	140
IQ_CAL_TX_CHANNEL_5G_MI=[1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0]

#			149	151	153	157	159	161	165
IQ_CAL_TX_CHANNEL_5G_UP=[1,1,1,1,1,1,1]


#------------------------------------------------------------------------------
# Set target power offset for each channel
# The suggest value is 0. If you want to fine tune the target power, you can set
# a non-zero value. For example, if the original target power is 12 dBm. You can
# set offset value to 1, then the final target value is 13 dBm.
#------------------------------------------------------------------------------
#			1	2	3	4	5	6	7	8	9	10	11	12	13	14
IQ_CAL_TX_OFFSET_2G=[0,0,0,0,0,0,0,0,0,0,0,0,0,0]

#			36	38	40	44	46	48	52	54	56	60	62	64
IQ_CAL_TX_OFFSET_5G_LO=[0,0,0,0,0,0,0,0,0,0,0,0]

#			100	102	104	108	110	112	116	118	120	124	126	128	132	134	136	140
IQ_CAL_TX_OFFSET_5G_MI=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

#			149	151	153	157	159	161	165
IQ_CAL_TX_OFFSET_5G_UP=[0,0,0,0,0,0,0]



# Frequency offset

OSC_value={}
freq_index = [20,40]   #Frequency index = [index_start,index_stop]
freq_cal_err = 5 #ppm


TargetPower={}
TargetPower_Offset=1.5

IQ_CAL_TX_CHANNEL_2G=[1,6,13]
points_dic={}

TX_Gain={} #store the Gain of each channel of both TX
TX_Gain[0]=[1]*15
TX_Gain[1]=[1]*15

Test_Item=0      #To record the test step and fail time
Fail_flag=0      #
RX_Parameter={}  #store the parameters when RX_Verify and TX_Verify,for example,
TX_Parameter={}  # Antenna,channel,modulation,MCS,BW 
                  #begin from 3 and end at 

Evm_top=0
Evm_low=-100

Mask_top=2
Mask_low=0

Flat_top=1
Flat_low=0

LO_Leakage_top=2
LO_Leakage_low=-999

DC_Leakage_top=-15
DC_Leakage_low=-100

cache_result={}

#measure_offset = 1 #compensate for equipment automatic measurement
#cableloss_attn = 25 + measure_offset
ch_compensation = {1:1,2:0,3:0,4:0,5:0,6:1,7:0,8:0,9:0,10:0,11:0,12:0,13:1}  #{channel:compensation,},it's compensation for test fixture point
PER_RETRY_TIMES = 3
TX_RETRY_TIMES = 5 #if retry==2 test-script do cal again 

''' 
print_flow = [
"IQ_CAL_TX_XTAL",
"IQ_CAL_TX_OUTPUT	2G",
"IQ_VERIFY_TX\t1\t11M\tTX0",
"IQ_VERIFY_TX\t13\t11M\tTX0",
"IQ_VERIFY_TX\t1\tHT20_MCS7\tTX0",
"IQ_VERIFY_TX\t13\tHT20_MCS7\tTX0",
"IQ_VERIFY_TX\t3\tHT40_MCS7\tTX0",
"IQ_VERIFY_TX\t11\tHT40_MCS7\tTX0",
"IQ_VERIFY_TX\t1\t54M\tTX1",
"IQ_VERIFY_TX\t13\t54M\tTX1",
"IQ_VERIFY_TX\t1\tHT20_MCS7\tTX1",
"IQ_VERIFY_TX\t13\tHT20_MCS7\tTX1",
"IQ_VERIFY_TX\t3\tHT40_MCS7\tTX1",
"IQ_VERIFY_TX\t11\tHT40_MCS7\tTX1",
"IQ_VERIFY_RX_PER\t1\t11M\tRX0",
"IQ_VERIFY_RX_PER\t13\t11M\tRX0",
"IQ_VERIFY_RX_PER\t1\t54M\tRX0",
"IQ_VERIFY_RX_PER\t13\t54M\tRX0",
"IQ_VERIFY_RX_PER\t1\tHT20_MCS7\tRX0",
"IQ_VERIFY_RX_PER\t13\tHT20_MCS7\tRX0",
"IQ_VERIFY_RX_PER\t3\tHT40_MCS7\tRX0 ",
"IQ_VERIFY_RX_PER\t11\tHT40_MCS7\tRX0",
"IQ_VERIFY_RX_PER\t1\t54M\tRX1",
"IQ_VERIFY_RX_PER\t13\t54M\tRX1",
"IQ_VERIFY_RX_PER\t1\tHT20_MCS7\tRX1",
"IQ_VERIFY_RX_PER\t13\tHT20_MCS7\tRX1",
"IQ_VERIFY_RX_PER\t3\tHT40_MCS7\tRX1",
"IQ_VERIFY_RX_PER\t11\tHT40_MCS7\tRX1"]


'''
print_flow = [
"IQ_CAL_TX_XTAL",
"IQ_CAL_TX_OUTPUT	2G",
"IQ_VERIFY_TX\t1\t11M\tTX0",
"IQ_VERIFY_TX\t6\t54M\tTX1",
"IQ_VERIFY_TX\t13\tHT20_MCS7\tTX0",
"IQ_VERIFY_TX\t11\tHT40_MCS7\tTX1",
"IQ_VERIFY_TX\t11\tHT40_MCS7\tTX0",
"IQ_VERIFY_RX_PER\t1\t54M\tRX0",
"IQ_VERIFY_RX_PER\t6\tHT20_MCS7\tRX1",
"IQ_VERIFY_RX_PER\t11\tHT40_MCS7\tRX0"]

#Gain_Wrote_E2PROM=
#model and chip-ver relation dic
Model_ver_dic = {'CGN2-ROG':['2.5.0.4','11',1,8,1],
                 'CGN2-RES':['2.5.0.5','11',1,8,1],
                 'CGN2-SDL':['2.5.0.4','11',1,8,1],
                 'CVE-30360KD2':['2.5.0.4','11',1,9,1],
                 'CDE-30364':['2.5.0.4','11',1,9,1],
                 'CDE-30364 (ON)':['2.5.0.4','11',1,9,1],
                 'exception':['2.4.0.5','01',0,8,1]}
                 #{model:[WiFiVer,e2p30-value,temcomp,TargetPow<8=14dB;9=15dB>],FullPacket}

#Initial gain for calibration
#IQ_CAL_GAIN_1ST	=20
#IQ_CAL_GAIN_2ND	=12

IQ_CAL_GAIN_1ST=[]

#IQ_CAL_GAIN_5G_1ST=10
#IQ_CAL_GAIN_5G_2ND=7


#------------------------------------------------------------------------------
# Power level upper tolerance for Tx verification (+/- dBm)
#------------------------------------------------------------------------------
#				54M	48M	36M	24M	18M	12M	9M	6M	11M	5.5M	2M	1M
IQ_TX_POWER_TOLERANCE_UP=[1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5]	
                         

#------------------------------------------------------------------------------
# Power level Lower tolerance for Tx verification (+/- dBm)
#------------------------------------------------------------------------------
#				54M	48M	36M	24M	18M	12M	9M	6M	11M	5.5M	2M	1M
IQ_TX_POWER_TOLERANCE_LO=[1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5]	
#                              o_1.5

#------------------------------------------------------------------------------
# Power level tolerance for Tx MIMO verification (+/- dBm)	
#------------------------------------------------------------------------------
#				MCS7	MCS6	MCS5	MCS4	MCS3	MCS2	MCS1	MCS0
IQ_TX_POWER_Tolerance_MIMO_1S=[1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5]	

#				MCS15	MCS14	MCS13	MCS12	MCS11	MCS10	MCS9	MCS9
IQ_TX_POWER_Tolerance_MIMO_2S=[1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5]	

                         
IQ_FREQ_ERROR_LIMIT_DSSS = 20 	# the allowed frequency error in ppm when in DSSS mode
IQ_FREQ_ERROR_LIMIT_OFDM = 20 	# the allowed frequency error in ppm when in OFDM mode

FREQ_ERROR_LIMIT=20
FREQ_AVG=0
# [FREQ]    1    2    3    4    5    6    7    8    9   10    11   12   13   14
# 2.4GHz : 2412 2417 2422 2427 2432 2437 2442 2447 2452 2457 2462 2467 2472 2484



#------------------------------------------------------------------------------
# SPA Settings
#------------------------------------------------------------------------------
SPA_FAIL_POINTS_LIMIT= 2            # 2% violation limit

#------------------------------------------------------------------------------
# OBW Settings
#------------------------------------------------------------------------------
OBW_PWR_PERCENTAGE_CH14	 = 90	 # percentage of total power to be measured for OBW 
OBW_BANDWIDTH_LIMIT_CH14 = 13.75 # MHz for passing the OBW

#----------------------------------------
# Legacy 11b & 11g EVM limit
#----------------------------------------
#			54M	48M	36M	24M	18M	12M	9M	6M	11M	5.5M	2M	1M
IQ_EVM_Legacy=[-26,-22,-19,-16,-13,-10,-8,-5,-10,-10,-10,-10]

#----------------------------------------
# EVM limit for EWC data rate
#----------------------------------------
#		65M	58.5M	52M	39M	26M	19.5M	13M	6.5M
IQ_EVM_HT20_1S=[-28,-24,-21,-18,-15,-12,-10,-7]

#		130M	117M	104M	78M	52M	39M	26M	13M
IQ_EVM_HT20_2S=[-28,-24,-21,-18,-15,-12,-10,-7]

#		135M	121.5M	108M	81M	54M	40.5M	27M	13.5M
IQ_EVM_HT40_1S=[-28,-24,-21,-18,-15,-12,-10,-7]

#		270M	243M	216M	162M	108M	81M	54M	27M
IQ_EVM_HT40_2S=[-28,-24,-21,-18,-15,-12,-10,-7]


#------------------------------------------------------------------------------
# PER Measurement Settings
#------------------------------------------------------------------------------
PER_PASS_LIMIT_DSSS	= 92	# need 92% good packets for pass.
PER_PASS_LIMIT_OFDM	= 90	# need 90% good packets for pass.
PER_MAX_PASS_LIMIT_DSSS	= 90	# need 92% good packets for pass.
PER_MAX_PASS_LIMIT_OFDM	= 90	# need 90% good packets for pass.

#------------------------------------------------------------------------------
# PER Power Level setting
#------------------------------------------------------------------------------
#				54M	48M	36M	24M	18M	12M	9M	6M	11M	5.5M	2M	1M
#IQ_PER_SENS_Legacy=[-74,-76,-78,-83,-85,-87,-89,-90,-87,-88,-88,-90]
IQ_PER_SENS_Legacy=[-70,-76,-78,-83,-85,-87,-89,-90,-85,-88,-88,-90]

#rfPower_dic={0:-59.0,1:-46.0,2:-40.0,3:-40.0}
#rfPower_dic={0:-31.0,1:-18.0,2:-12.0,3:-12.0} 
#increasing the power for debug
#------------------------------------------------------------------------------
# sensitivity level at overload condition (large signal level)
#------------------------------------------------------------------------------
#				54M	48M	36M	24M	18M	12M	9M	6M	11M	5.5M	2M	1M
IQ_PER_MAX_SENS_Legacy=[-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18]

#				65M	58.5M	52M	39M	26M	19.5M	13M	6.5M
#IQ_PER_SENS_HT20_1S=[-68,-71,-75,-80,-83,-85,-88,-91]
IQ_PER_SENS_HT20_1S=[-64,-71,-75,-80,-83,-85,-88,-91]
IQ_PER_SENS_MAX_HT20_1S	= [-20,-20,-20,-20,-20,-20,-20,-20]

#				135M	121.5M	108M	81M	54M	40.5M	27M	13.5M
#IQ_PER_SENS_HT40_1S=[-68,-68,-70,-75,-78,-81,-83,-85]
IQ_PER_SENS_MAX_HT40_1S=[-20,-20,-20,-20,-20,-20,-20,-20]
IQ_PER_SENS_HT40_1S=[-64,-68,-70,-75,-78,-81,-83,-85]

if os.path.isfile('c:\\station.ini'):
   execfile('c:\\station.ini')            

rfPower_dic={0:IQ_PER_SENS_Legacy[-4]+cableloss_attn,1:IQ_PER_SENS_Legacy[0]+cableloss_attn,2:IQ_PER_SENS_HT20_1S[0]+cableloss_attn,3:IQ_PER_SENS_HT40_1S[0]+cableloss_attn} 
 
